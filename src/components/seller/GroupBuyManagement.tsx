'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { SectionHeader } from '@/components/common/SectionHeader';
import { EmptyState } from '@/components/common/EmptyState';
import { Skeleton } from '@/components/ui/skeleton';
import { ScrollToTopButton, ErrorDialog, ConfirmDialog } from '@/components/common';
import { FORM_STYLES } from '@/constants/form-styles';
import {
  getSellerGroupBuys,
  getAllSellerGroupBuys,
  deleteGroupBuy,
  updateGroupBuyStatus,
} from '@/services/groupbuyService';
import type { SellerGroupBuy, SellerGroupBuyListResponse } from '@/types/groupbuy';
import { Plus } from 'lucide-react';
import { Pagination } from '@/components/seller/common/Pagination';
import { Badge } from '@/components/ui/badge';

export function GroupBuyManagement() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingCounts, setIsLoadingCounts] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [groupBuyData, setGroupBuyData] = useState<SellerGroupBuyListResponse | null>(null);
  const [allGroupBuys, setAllGroupBuys] = useState<SellerGroupBuy[]>([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [pageSize] = useState(10);
  const [deleteConfirm, setDeleteConfirm] = useState<{
    isOpen: boolean;
    groupBuyId: number | null;
    groupBuyTitle: string;
  }>({
    isOpen: false,
    groupBuyId: null,
    groupBuyTitle: '',
  });
  const [deleteError, setDeleteError] = useState<{ isOpen: boolean; message: string }>({
    isOpen: false,
    message: '',
  });
  const [startConfirm, setStartConfirm] = useState<{
    isOpen: boolean;
    groupBuyId: number | null;
    groupBuyTitle: string;
  }>({
    isOpen: false,
    groupBuyId: null,
    groupBuyTitle: '',
  });

  // Í∑∏Î£πÎ∞îÏù¥ Î™©Î°ù Ï°∞Ìöå
  const fetchGroupBuys = async (page: number = 0) => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await getSellerGroupBuys(page, pageSize);
      setGroupBuyData(data);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'ÏïåÏàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      setError(errorMessage || 'Í≥µÍµ¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      // TODO: ÏóêÎü¨ Î°úÍπÖ ÏÑúÎπÑÏä§ Ïó∞Îèô
      console.error('Í≥µÍµ¨ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Ï†ÑÏ≤¥ Í∑∏Î£πÎ∞îÏù¥ Î™©Î°ù Ï°∞Ìöå (Ïπ¥Ïö¥Ìä∏Ïö©)
  const fetchAllGroupBuys = async () => {
    setIsLoadingCounts(true);
    try {
      const data = await getAllSellerGroupBuys();
      setAllGroupBuys(data.data.content || []);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'ÏïåÏàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      console.error('Ï†ÑÏ≤¥Í≥µÍµ¨ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', err);
    } finally {
      setIsLoadingCounts(false);
    }
  };

  useEffect(() => {
    fetchGroupBuys(currentPage);
    fetchAllGroupBuys();
  }, [currentPage]);

  const handleRefresh = () => {
    fetchGroupBuys(currentPage);
  };

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  const handleRegisterGroupBuy = () => {
    router.push('/seller/group-buys/new');
  };

  const handleViewGroupBuy = (groupBuyId: number) => {
    router.push(`/groupbuys/${groupBuyId}`);
  };

  const handleEditGroupBuy = (groupBuyId: number) => {
    router.push(`/seller/group-buys/${groupBuyId}/edit`);
  };

  const handleDeleteClick = (groupBuyId: number, groupBuyTitle: string) => {
    setDeleteConfirm({
      isOpen: true,
      groupBuyId,
      groupBuyTitle,
    });
  };

  const handleDeleteConfirm = async () => {
    if (!deleteConfirm.groupBuyId) return;
    const groupBuyTitle = deleteConfirm.groupBuyTitle;

    try {
      // Ïã§Ï†ú ÏÇ≠Ï†ú API Ìò∏Ï∂ú
      await deleteGroupBuy(deleteConfirm.groupBuyId);

      // ÏÇ≠Ï†ú ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      await fetchGroupBuys(currentPage);
      await fetchAllGroupBuys(); // Ï†ÑÏ≤¥ Ïπ¥Ïö¥Ìä∏ÎèÑ ÏÉàÎ°úÍ≥†Ïπ®
      setDeleteConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'ÏïåÏàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      console.error('Í≥µÍµ¨ ÏÇ≠Ï†ú Ïã§Ìå®:', err);
      setDeleteError({
        isOpen: true,
        message: `"${groupBuyTitle}" ${errorMessage || 'Í∑∏Î£πÎ∞îÏù¥ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'}`,
      });
      setDeleteConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
    }
  };

  const handleDeleteCancel = () => {
    setDeleteConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
  };

  const handleStartClick = (groupBuyId: number, groupBuyTitle: string) => {
    setStartConfirm({
      isOpen: true,
      groupBuyId,
      groupBuyTitle,
    });
  };

  const handleStartConfirm = async () => {
    if (!startConfirm.groupBuyId) return;

    try {
      await updateGroupBuyStatus(startConfirm.groupBuyId, 'OPEN');
      await fetchGroupBuys(currentPage);
      await fetchAllGroupBuys(); // Ï†ÑÏ≤¥ Ïπ¥Ïö¥Ìä∏ÎèÑ ÏÉàÎ°úÍ≥†Ïπ®
      setStartConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'ÏïåÏàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      console.error('Í≥µÍµ¨ ÏãúÏûë Ïã§Ìå®:', err);
      setError(errorMessage || 'Í≥µÍµ¨ ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      setStartConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
    }
  };

  const handleStartCancel = () => {
    setStartConfirm({ isOpen: false, groupBuyId: null, groupBuyTitle: '' });
  };

  // ÏÉÅÌÉú Î±ÉÏßÄ Î†åÎçîÎßÅ Ìï®Ïàò
  const renderStatusBadge = (status: string) => {
    switch (status) {
      case 'OPEN':
        return (
          <span className="inline-flex items-center rounded-lg bg-primary-100 px-3 py-1.5 text-xs font-medium text-primary-300">
            ÏßÑÌñâÏ§ë
          </span>
        );
      case 'DRAFT':
        return (
          <span className="inline-flex items-center rounded-lg border border-primary-300 bg-transparent px-3 py-1.5 text-xs font-medium text-primary-300">
            ÎåÄÍ∏∞Ï§ë
          </span>
        );
      case 'CLOSED':
        return (
          <span className="inline-flex items-center rounded-lg border border-bg-300 bg-bg-200 px-3 py-1.5 text-xs font-medium text-text-200">
            ÎßàÍ∞êÎê®
          </span>
        );
      default:
        return null;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ko-KR');
  };

  // Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ ÌÉúÍ∑∏Îäî ÌòÑÏû¨ APIÏóêÏÑú Ï†úÍ≥µÎêòÏßÄ ÏïäÏúºÎØÄÎ°ú Ï†úÍ±∞

  const groupBuys = groupBuyData?.data?.content || [];
  const totalElements = groupBuyData?.data?.totalElements || 0;
  const totalPages = groupBuyData?.data?.totalPages || 0;
  const isFirst = groupBuyData?.data?.first || true;
  const isLast = groupBuyData?.data?.last || true;

  // ÏµúÏã†ÏàúÏúºÎ°ú Ï†ïÎ†¨ (updatedAt Í∏∞Ï§Ä)
  const sortedGroupBuys = [...groupBuys].sort((a, b) => {
    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();
  });

  // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ïπ¥Ïö¥Ìä∏ Í≥ÑÏÇ∞
  const openCount = allGroupBuys.filter((g) => g.status === 'OPEN').length;
  const draftCount = allGroupBuys.filter((g) => g.status === 'DRAFT').length;
  const closedCount = allGroupBuys.filter((g) => g.status === 'CLOSED').length;
  const totalCount = allGroupBuys.length;

  if (error) {
    return (
      <div className="mx-auto max-w-3xl px-4 py-10 md:px-0">
        <h1 className="mb-10 text-center text-3xl font-semibold text-text-100">Í≥µÍµ¨ Í¥ÄÎ¶¨</h1>
        <div className="space-y-6">
          <EmptyState
            icon="ü§ù"
            title="Îì±Î°ùÎêú Í≥µÍµ¨Í∞Ä ÏóÜÏäµÎãàÎã§"
            description="Ï≤´ Î≤àÏß∏ Í≥µÍµ¨Î•º Îì±Î°ùÌï¥Î≥¥ÏÑ∏Ïöî"
          />
          <div className="text-center">
            <Button onClick={handleRegisterGroupBuy} className={FORM_STYLES.button.submit}>
              <Plus className="mr-2 h-4 w-4" />
              Í≥µÍµ¨ Îì±Î°ùÌïòÍ∏∞
            </Button>
          </div>
        </div>
        <ScrollToTopButton />
      </div>
    );
  }
  if (isLoading) {
    return (
      <div className="mx-auto max-w-3xl px-4 py-10 md:px-0">
        <h1 className="mb-10 text-center text-3xl font-semibold text-text-100">Í≥µÍµ¨ Í¥ÄÎ¶¨</h1>
        <div className="space-y-4">
          {Array.from({ length: 3 }).map((_, index) => (
            <Skeleton key={index} className="h-24 w-full" />
          ))}
        </div>
        <ScrollToTopButton />
      </div>
    );
  }

  return (
    <div className="mx-auto max-w-3xl px-4 py-10 md:px-0">
      {/* ÌÉÄÏù¥ÌãÄ */}
      <h1 className="mb-10 text-center text-3xl font-semibold text-text-100">Í≥µÍµ¨ Í¥ÄÎ¶¨</h1>

      {/* ÏÉÅÎã® Ïπ¥Ïö¥Ìä∏ 4Í∞ú */}
      <div className="mx-auto mb-10 flex w-full max-w-lg justify-center">
        <div className="flex flex-1 flex-col items-center">
          <span className="text-2xl font-bold text-text-100 md:text-4xl">{totalCount}</span>
          <span className="mt-1 text-center text-sm font-medium text-text-200 md:text-lg">
            Ï†ÑÏ≤¥
          </span>
        </div>
        <div className="flex flex-1 flex-col items-center">
          <span className="text-2xl font-bold text-text-100 md:text-4xl">{openCount}</span>
          <span className="mt-1 text-center text-sm font-medium text-text-200 md:text-lg">
            Í≥µÍµ¨ ÏßÑÌñâÏ§ë
          </span>
        </div>
        <div className="flex flex-1 flex-col items-center">
          <span className="text-2xl font-bold text-text-100 md:text-4xl">{draftCount}</span>
          <span className="mt-1 text-center text-sm font-medium text-text-200 md:text-lg">
            Í≥µÍµ¨ ÎåÄÍ∏∞
          </span>
        </div>
        <div className="flex flex-1 flex-col items-center">
          <span className="text-2xl font-bold text-text-100 md:text-4xl">{closedCount}</span>
          <span className="mt-1 text-center text-sm font-medium text-text-200 md:text-lg">
            Í≥µÍµ¨ ÎßàÍ∞ê
          </span>
        </div>
      </div>

      {/* Í≥µÍµ¨ Î™©Î°ù ÏÑπÏÖò */}
      <section>
        <SectionHeader title="Îì±Î°ùÎêú Í≥µÍµ¨" />
        <div className="mt-4">
          {groupBuys.length === 0 ? (
            <div className="space-y-6">
              <EmptyState
                icon="ü§ù"
                title="Îì±Î°ùÎêú Í≥µÍµ¨Í∞Ä ÏóÜÏäµÎãàÎã§"
                description="Ï≤´ Î≤àÏß∏ Í≥µÍµ¨Î•º Îì±Î°ùÌï¥Î≥¥ÏÑ∏Ïöî"
              />
              <div className="text-center">
                <Button onClick={handleRegisterGroupBuy} className={FORM_STYLES.button.submit}>
                  <Plus className="mr-2 h-4 w-4" />
                  Í≥µÍµ¨ Îì±Î°ùÌïòÍ∏∞
                </Button>
              </div>
            </div>
          ) : (
            <div
              className="space-y-4"
              style={{
                scrollBehavior: 'smooth',
                scrollbarWidth: 'none',
                msOverflowStyle: 'none',
              }}
            >
              {sortedGroupBuys.map((groupBuy) => (
                <Card key={groupBuy.id} className={FORM_STYLES.card.seller}>
                  <CardContent className="relative p-6">
                    {/* ÏÉÅÌÉú Î±ÉÏßÄ: Ïö∞Ï∏° ÏÉÅÎã® Í≥†Ï†ï */}
                    <div className="absolute right-6 top-6 z-10">
                      {renderStatusBadge(groupBuy.status)}
                    </div>
                    {/* Ï†úÎ™© */}
                    <h2 className="mb-4 text-lg font-semibold text-text-100">{groupBuy.title}</h2>

                    {/* Ïç∏ÎÑ§ÏùºÍ≥º Ï†ïÎ≥¥Î•º Í∞ÄÎ°úÎ°ú Î∞∞Ïπò */}
                    <div className="flex gap-4">
                      {/* Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ */}
                      <div className="flex-shrink-0">
                        <img
                          src={groupBuy.thumbnailUrl}
                          alt={groupBuy.title}
                          className="rounded-lg object-cover"
                          style={{ width: '120px', height: '120px' }}
                        />
                      </div>

                      {/* Í∞ÄÍ≤© Ï†ïÎ≥¥ */}
                      <div className="flex-1 space-y-1 text-sm text-text-300">
                        <div>ÏãúÏûëÍ∞Ä: {groupBuy.startPrice.toLocaleString()}Ïõê</div>
                        <div>ÏµúÎåÄ Ìï†Ïù∏ Ï†ÅÏö©Í∞Ä: {groupBuy.displayFinalPrice.toLocaleString()}Ïõê</div>
                        <div>ÏµúÎåÄ Ìï†Ïù∏Ïú®: {groupBuy.maxDiscountRate}%</div>
                        <div>
                          Ï£ºÎ¨∏ Ïàò: {groupBuy.orderCount}Í∞ú | Ïû¨Í≥†:{' '}
                          {groupBuy.totalStock - groupBuy.soldQuantity}Í∞ú
                        </div>
                        <div>
                          {groupBuy.startAt && `ÏãúÏûëÏùº: ${formatDate(groupBuy.startAt)} | `}ÎßàÍ∞êÏùº:{' '}
                          {formatDate(groupBuy.endsAt)}
                        </div>
                      </div>
                    </div>
                    {/* ÌïòÎã®: Î≤ÑÌäº 4Í∞ú(Ï¢å) */}
                    <div className="mt-4 flex gap-2">
                      <Button
                        onClick={() => handleViewGroupBuy(groupBuy.id)}
                        className="h-10 rounded-lg border border-primary-300 bg-bg-100 px-6 text-sm text-primary-300 shadow-none transition-colors hover:bg-primary-100 active:bg-primary-100 active:text-primary-300"
                      >
                        ÏÉÅÏÑ∏Î≥¥Í∏∞
                      </Button>
                      {groupBuy.status === 'DRAFT' && (
                        <Button
                          onClick={() => handleEditGroupBuy(groupBuy.id)}
                          className="h-10 rounded-lg border border-primary-300 bg-bg-100 px-6 text-sm text-primary-300 shadow-none transition-colors hover:bg-primary-100 active:bg-primary-100 active:text-primary-300"
                        >
                          ÏàòÏ†ïÌïòÍ∏∞
                        </Button>
                      )}
                      {groupBuy.status === 'DRAFT' && (
                        <Button
                          onClick={() => handleStartClick(groupBuy.id, groupBuy.title)}
                          className="h-10 rounded-lg border border-primary-300 bg-bg-100 px-6 text-sm text-primary-300 shadow-none transition-colors hover:bg-primary-100 active:bg-primary-100 active:text-primary-300"
                        >
                          Í≥µÍµ¨ÏãúÏûë
                        </Button>
                      )}
                      {groupBuy.status !== 'OPEN' && (
                        <Button
                          onClick={() => handleDeleteClick(groupBuy.id, groupBuy.title)}
                          className="h-10 rounded-lg border border-bg-300 bg-bg-100 px-6 text-sm text-text-300 shadow-none transition-colors hover:border-primary-200 hover:text-primary-200"
                        >
                          ÏÇ≠Ï†úÌïòÍ∏∞
                        </Button>
                      )}
                    </div>
                    {/* Îì±Î°ùÏùº/ÏàòÏ†ïÏùº: Ïò§Î•∏Ï™Ω ÌïòÎã®, Í∏ÄÏûê ÌÅ¨Í∏∞ text-sm */}
                    <div className="absolute bottom-6 right-6 whitespace-nowrap text-sm text-text-300">
                      Îì±Î°ùÏùº: {formatDate(groupBuy.createdAt)} ÏàòÏ†ïÏùº:{' '}
                      {formatDate(groupBuy.updatedAt)}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </section>

      {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò: Í≥µÍµ¨ Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ ÌïòÎã® */}
      {totalPages > 1 && (
        <div className="mt-12">
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={setCurrentPage}
          />
        </div>
      )}

      {/* ScrollToTopButton - ÏùºÍ¥ÄÎêú Ïä§ÌÅ¨Î°§ ÎèôÏûë */}
      <ScrollToTopButton />

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨Ï∞Ω */}
      <ConfirmDialog
        isOpen={deleteConfirm.isOpen}
        onClose={handleDeleteCancel}
        onConfirm={handleDeleteConfirm}
        title="Í≥µÍµ¨ ÏÇ≠Ï†ú ÌôïÏù∏"
        message={`"${deleteConfirm.groupBuyTitle}"\n\nÍ≥µÍµ¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? ÏÇ≠Ï†úÌïòÎ©¥ Î≥µÍµ¨Í∞Ä Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.`}
        confirmText="ÏÇ≠Ï†úÌïòÍ∏∞"
        cancelText="Ï∑®ÏÜå"
        variant="danger"
      />

      {/* ÏÇ≠Ï†ú ÏóêÎü¨ Î™®Îã¨Ï∞Ω */}
      <ErrorDialog
        isOpen={deleteError.isOpen}
        onClose={() => setDeleteError({ isOpen: false, message: '' })}
        title="Í≥µÍµ¨ ÏÇ≠Ï†ú Ïã§Ìå®"
        message={deleteError.message}
      />

      {/* Í≥µÍµ¨ ÏãúÏûë ÌôïÏù∏ Î™®Îã¨Ï∞Ω */}
      <ConfirmDialog
        isOpen={startConfirm.isOpen}
        onClose={handleStartCancel}
        onConfirm={handleStartConfirm}
        title="Í≥µÍµ¨ ÏãúÏûë ÌôïÏù∏"
        message={`"${startConfirm.groupBuyTitle}"\n\nÍ≥µÎèôÍµ¨Îß§Î•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå? ÏãúÏûë ÌõÑ ÏàòÏ†ïÏù¥ Î∂àÍ∞ÄÌï©ÎãàÎã§.`}
        confirmText="ÏãúÏûëÌïòÍ∏∞"
        cancelText="Ï∑®ÏÜå"
        variant="default"
      />
    </div>
  );
}
